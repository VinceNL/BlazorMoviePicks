@page "/"
@implements IDisposable
@inject TMDBClient TMDB
@inject NavigationManager Nav
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<PageTitle>Blazor Movie: Popular Movies</PageTitle>

<div class="container-xxl py-3">
    <div>
        <h1 class="display-6">
            <span class="text-danger">
                <i class="bi bi-fire"></i>
            </span>
            Popular Movies
        </h1>
    </div>
    <div class="d-flex flex-column flex-md-row justify-content-between my-3">

        <div class="row row-cols-2 row-cols-lg-4 row-cols-xl-5 g-3 justify-content-center justify-content-md-start">
            @if (movies is not null)
            {
                @foreach (PopularMovie movie in movies.Results)
                {
                    <div class="col">
                        <MovieCard Movie="movie" 
                                   OnMovieCardClick="ToggleMovieSelection"
                                   IsSelected="@selectedMovieIds.Contains(movie.Id)" />
                    </div>
                }
            }
            else
            {
                for (int i = 0; i < 10; i++)
                {
                    <div class="col">
                        <MovieCard />
                    </div>
                }
            }
        </div>

    </div>

    @if (movies?.TotalPages > 1)
    {
        <div class="my-3">
            <Paginator 
                CurrentPage="movies.Page" 
                TotalPages="movies.TotalPages > 500 ? 500 : movies.TotalPages"
                OnPageChange="GetPage"/>
        </div>
    }
</div>

@code {
    private PopularMoviesPagedResponse? movies;
    private HashSet<int> selectedMovieIds = new HashSet<int>();
    private Timer? _debounceTimer;

    [SupplyParameterFromQuery]
    public int Page { get; set; } = 1;

    protected override async Task OnParametersSetAsync()
    {
        await LoadSelectionAsync();
        await LoadMoviesAsync();
    }

    private void GetPage(int pageNumber)
    {
        string url = Nav.GetUriWithQueryParameter("page", pageNumber);
        Nav.NavigateTo(url);
    }

    private void ToggleMovieSelection(PopularMovie movie)
    {
        if (selectedMovieIds.Contains(movie.Id))
        {
            selectedMovieIds.Remove(movie.Id);
        }
        else
        {
            selectedMovieIds.Add(movie.Id);
        }

        // Save the updated IDs to local storage
        DebouncedSave();
    }

    private async Task LoadSelectionAsync()
    {
        try
        {
            var ids = await localStorage.GetItemAsync<List<int>>("selectedMovieIds");
            if (ids != null)
            {
                selectedMovieIds = new HashSet<int>(ids);
            }
        }
        catch (Exception ex)
        {

            Console.WriteLine($"Error loading selections from local storage: {ex.Message}");
            selectedMovieIds = new HashSet<int>();
        }
        
    }

    private async Task LoadMoviesAsync()
    {
        if (Page < 1) Page = 1;
        else if (Page > 500) Page = 500;

        try
        {
            movies = await TMDB.GetPopularMoviesAsync(Page)!;
        }
        catch (Exception ex)
        {

            Console.WriteLine($"Error fetching movies: {ex.Message}");
            movies = null;
        }
    }

    private async Task SaveSelectionAsync()
    {
        try
        {
            await localStorage.SetItemAsync("selectedMovieIds", selectedMovieIds.ToList());
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving selection to local storage: {ex.Message}");
        }
    }

    private void DebouncedSave()
    {
        _debounceTimer?.Dispose(); // Stop the previous timer
        _debounceTimer = new Timer(async _ =>
        {
            await SaveSelectionAsync();
        }, null, 500, Timeout.Infinite); // Delay save operation by 500 ms
    }

    public void Dispose()
    {
        _debounceTimer?.Dispose();
    }
}