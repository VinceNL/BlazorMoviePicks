@page "/"
@using BlazorMoviePicks.Enums
@implements IDisposable
@inject ITmdbClient TMDB
@inject NavigationManager Nav
@inject IMovieStateService MovieState

<PageTitle>Blazor Movie: Movies</PageTitle>

<SelectedMoviesOffcanvas SelectedMovies="@MovieState.SelectedMovies" OnClearLists="ClearSelectedMovieLists" OnRemoveFromList="RemoveMovieFromList" />
<div class="container-xxl py-3">
    <div>
        <h1 class="display-6">
            <span class="text">
                <i class="bi bi-film"></i>
            </span>
            Movies
        </h1>
        <MovieTypeSelector CurrentMovieType="MovieState.CurrentMovieType" OnMovieTypeChanged="SetMovieType" />
    </div>
    <div class="d-flex flex-column flex-md-row justify-content-between my-3">

        <div class="row row-cols-2 row-cols-lg-4 row-cols-xl-5 g-3 justify-content-center justify-content-md-start">
            @if (movies is not null)
            {
                @foreach (MovieResponse movie in movies.Results)
                {
                    <div class="col">
                        <MovieCard Movie="movie"
                                   OnMovieCardClick="ToggleMovieSelection"
                                   IsSelected="@MovieState.SelectedMovies.Any(m => m.Id == movie.Id)" />
                    </div>
                }
            }
            else
            {
                for (int i = 0; i < 10; i++)
                {
                    <div class="col">
                        <MovieCard />
                    </div>
                }
            }
        </div>

    </div>

    @if (movies?.TotalPages > 1)
    {
        <div class="my-3">
            <Paginator CurrentPage="movies.Page"
                       TotalPages="movies.TotalPages > 500 ? 500 : movies.TotalPages"
                       OnPageChange="GetPage" />
        </div>
    }
</div>

@code {
    private MoviesPagedResponse? movies;

    [SupplyParameterFromQuery]
    public int Page { get; set; } = 1;

    protected override async Task OnInitializedAsync()
    {
        MovieState.OnChange += StateHasChanged;
        await MovieState.LoadStateAsync();
        await LoadMoviesAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadMoviesAsync();
    }

    private void GetPage(int pageNumber)
    {
        string url = Nav.GetUriWithQueryParameter("page", pageNumber);
        Nav.NavigateTo(url);
    }

    public void Dispose()
    {
        MovieState.OnChange -= StateHasChanged;
    }

    private async Task ToggleMovieSelection(MovieResponse movie)
    {
        var summary = new MovieSummary
            {
                Id = movie.Id,
                Title = movie.Title,
                OriginalTitle = movie.OriginalTitle,
                VoteAverage = movie.VoteAverage
            };

        await MovieState.AddOrRemoveMovieAsync(summary);
    }

    private async Task LoadMoviesAsync()
    {
        if (Page < 1) Page = 1;
        else if (Page > 500) Page = 500;

        try
        {
            if (MovieState.CurrentMovieType == MovieType.Popular)
            {
                movies = await TMDB.GetPopularMoviesAsync(Page)!;
            }
            else
            {
                movies = await TMDB.GetTopRatedMoviesAsync(Page)!;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching movies: {ex.Message}");
            movies = null;
        }
    }

    private async Task ClearSelectedMovieLists()
    {
        await MovieState.ClearSelectedMoviesAsync();
    }

    private async Task SetMovieType(MovieType type)
    {
        await MovieState.SetMovieTypeAsync(type);
        Page = 1;
        await LoadMoviesAsync();
    }

    private async Task RemoveMovieFromList(int index)
    {
        if (index >= 0 && index < MovieState.SelectedMovies.Count)
        {
            var movie = MovieState.SelectedMovies[index];
            await MovieState.AddOrRemoveMovieAsync(movie);
        }
    }
}
