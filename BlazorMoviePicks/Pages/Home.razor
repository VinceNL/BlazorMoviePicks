@page "/"
@using System.Text.Json
@implements IDisposable
@inject ITmdbClient TMDB
@inject NavigationManager Nav
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<PageTitle>Blazor Movie: Movies</PageTitle>

<SelectedMoviesOffcanvas SelectedMovies="@selectedMovies" OnClearLists="ClearSelectedMovieLists" OnRemoveFromList="DebouncedSave" />
<div class="container-xxl py-3">
    <div>
        <h1 class="display-6">
            <span class="text">
                <i class="bi bi-film"></i>
            </span>
            Movies
        </h1>
        <div class="btn-group" role="group">
            <button type="button" class="@($"btn btn-outline-secondary {GetButtonClass(MovieType.Popular)}")" @onclick="() => SetMovieType(MovieType.Popular)">Popular</button>
            <button type="button" class="@($"btn btn-outline-secondary {GetButtonClass(MovieType.TopRated)}")" @onclick="() => SetMovieType(MovieType.TopRated)">Top Rated</button>
        </div>
    </div>
    <div class="d-flex flex-column flex-md-row justify-content-between my-3">

        <div class="row row-cols-2 row-cols-lg-4 row-cols-xl-5 g-3 justify-content-center justify-content-md-start">
            @if (movies is not null)
            {
                @foreach (PopularMovie movie in movies.Results)
                {
                    <div class="col">
                        <MovieCard Movie="movie"
                                   OnMovieCardClick="ToggleMovieSelection"
                                   IsSelected="@selectedMovies.Any(m => m.Id == movie.Id)" />
                    </div>
                }
            }
            else
            {
                for (int i = 0; i < 10; i++)
                {
                    <div class="col">
                        <MovieCard />
                    </div>
                }
            }
        </div>

    </div>

    @if (movies?.TotalPages > 1)
    {
        <div class="my-3">
            <Paginator 
                CurrentPage="movies.Page"
                       TotalPages="movies.TotalPages > 500 ? 500 : movies.TotalPages"
                       OnPageChange="GetPage"/>
        </div>
    }
</div>

@code {
    private PopularMoviesPagedResponse? movies;
    private List<MovieSummary> selectedMovies = new List<MovieSummary>();
    private Timer? _debounceTimer;
    private MovieType currentMovieType = MovieType.Popular;

    [SupplyParameterFromQuery]
    public int Page { get; set; } = 1;

    protected override async Task OnParametersSetAsync()
    {
        await LoadSelectionAsync();
        await LoadMovieTypeAsync();
        await LoadMoviesAsync();
    }

    private void GetPage(int pageNumber)
    {
        string url = Nav.GetUriWithQueryParameter("page", pageNumber);
        Nav.NavigateTo(url);
    }

    private void ToggleMovieSelection(PopularMovie movie)
    {
        var summary = new MovieSummary
            {
                Id = movie.Id,
                Title = movie.Title,
                OriginalTitle = movie.OriginalTitle,
                VoteAverage = movie.VoteAverage
            };

        var existing = selectedMovies.FirstOrDefault(sm => sm.Id == movie.Id);
        if (existing != null)
        {
            selectedMovies.Remove(existing);
        }
        else
        {
            selectedMovies.Add(summary);
        }

        // Save the updated IDs to local storage
        DebouncedSave();
    }

    private async Task LoadSelectionAsync()
    {
        try
        {
            var json = await localStorage.GetItemAsync<string>("selectedMovieSummaries");
            if (!string.IsNullOrEmpty(json))
            {
                selectedMovies = JsonSerializer.Deserialize<List<MovieSummary>>(json)!;
            }
        }
        catch (Exception ex)
        {

            Console.WriteLine($"Error loading selections from local storage: {ex.Message}");
            selectedMovies.Clear();
        }
    }

    private async Task LoadMoviesAsync()
    {
        if (Page < 1) Page = 1;
        else if (Page > 500) Page = 500;

        try
        {
            if (currentMovieType == MovieType.Popular)
            {
                movies = await TMDB.GetPopularMoviesAsync(Page)!;
            }
            else
            {
                movies = await TMDB.GetTopRatedMoviesAsync(Page)!;
            }
        }
        catch (Exception ex)
        {

            Console.WriteLine($"Error fetching movies: {ex.Message}");
            movies = null;
        }
    }

    private async Task SaveSelectionAsync()
    {
        try
        {
            var json = JsonSerializer.Serialize(selectedMovies);
            await localStorage.SetItemAsync("selectedMovieSummaries", json);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving selection to local storage: {ex.Message}");
        }
    }

    private void DebouncedSave()
    {
        _debounceTimer?.Dispose(); // Stop the previous timer
        _debounceTimer = new Timer(async _ =>
        {
            await SaveSelectionAsync();
        }, null, 500, Timeout.Infinite); // Delay save operation by 500 ms
    }

    public void Dispose()
    {
        _debounceTimer?.Dispose();
    }

    private async void ClearSelectedMovieLists()
    {
        selectedMovies.Clear();
        await localStorage.RemoveItemAsync("selectedMovieSummaries");
    }

    private async Task SetMovieType(MovieType type)
    {
        currentMovieType = type;
        Page = 1;
        await SaveMovieTypeAsync();
        await LoadMoviesAsync();
    }

    private async Task SaveMovieTypeAsync()
    {
        await localStorage.SetItemAsync("currentMovieType", currentMovieType.ToString());
    }

    private async Task LoadMovieTypeAsync()
    {
        var movieTypeString = await localStorage.GetItemAsync<string>("currentMovieType");
        if (!string.IsNullOrEmpty(movieTypeString) && Enum.TryParse<MovieType>(movieTypeString, out var movieType))
        {
            currentMovieType = movieType;
        }
    }

    private string GetButtonClass(MovieType type)
    {
        return currentMovieType == type ? "btn btn-secondary" : "btn btn-outline-secondary";
    }

    private enum MovieType
    {
        Popular,
        TopRated
    }
}
