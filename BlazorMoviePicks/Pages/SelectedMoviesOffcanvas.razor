@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NavigationManager NavManager
@inject IJSRuntime JS

<div class="clapper-container">
    <div class="@OffcanvasClass" data-bs-toggle="offcanvas" data-bs-target="#offcanvasSelectedMovies" aria-controls="offcanvasSelectedMovies">
            <div></div>
            <div></div>
        @if (SelectedMovies.Count > 0)
        {
            <span class="badge badge-pill ms-2">
                Take
                <hr />
                @SelectedMovies.Count
            </span>
        }
    </div>
</div>

<div class="offcanvas offcanvas-start" tabindex="-1" id="offcanvasSelectedMovies" aria-labelledby="offcanvasSelectedMoviesLabel">
    <div class="offcanvas-header">
        <h5 class="offcanvas-title" id="offcanvasSelectedMoviesLabel">My watchlist</h5>
        <button type="button" class="btn-close text-reset" data-bs-dismiss="offcanvas" aria-label="Close"></button>
    </div>
    <div class="offcanvas-body">
        @if (SelectedMovies.Count > 0)
        {
            <SortableList Id="dragHandles" Handle=".drag-handle" Items="SelectedMovies" OnUpdate="@SortList" OnSpill="@RemoveFromList" Context="MovieSummary">
                <SortableItemTemplate>
                    <div class="sortable-item">
                        <div class="drag-handle">
                            <i class="fas fa-grip-vertical"></i>
                        </div>
                        <div class="card">
                            <p @onclick="() => NavigateToMovieDetails(MovieSummary.Id)" class="is-size-4 p-2 ml-4">
                                @(MovieSummary.OriginalTitle != null ? MovieSummary.OriginalTitle : MovieSummary.Title)
                            </p>
                        </div>
                    </div>
                </SortableItemTemplate>
            </SortableList>

            <button class="btn btn-outline-danger mt-3" @onclick="ClearLists">Clear List</button>
        }
        else
        {
            <p>No movies selected.</p>
        }
    </div>
</div>

@code {
    [Parameter]
    public List<MovieSummary> SelectedMovies { get; set; } = new List<MovieSummary>();

    [Parameter]
    public EventCallback OnClearLists { get; set; }

    [Parameter]
    public EventCallback OnRemoveFromList { get; set; }

    private string OffcanvasClass => SelectedMovies.Count > 0 ? "clapper" : "d-none";

    private void SortList((int oldIndex, int newIndex) indices)
    {
        var (oldIndex, newIndex) = indices;

        var items = this.SelectedMovies;
        var itemToMove = items[oldIndex];
        items.RemoveAt(oldIndex);

        if (newIndex < items.Count)
        {
            items.Insert(newIndex, itemToMove);
        }
        else
        {
            items.Add(itemToMove);
        }

        StateHasChanged();
    }

    private async Task RemoveFromList((int oldIndex, int newIndex) indeces)
    {
        var (oldIndex, newIndex) = indeces;
        if (oldIndex >= 0 && oldIndex < SelectedMovies.Count)
        {
            SelectedMovies.RemoveAt(oldIndex);

        }
        await OnRemoveFromList.InvokeAsync(oldIndex);
    }

    private async Task ClearLists()
    {
        await OnClearLists.InvokeAsync();
    }

    private async Task NavigateToMovieDetails(int movieId)
    {
        await JS.InvokeVoidAsync("closeOffcanvas");
        NavManager.NavigateTo($"/movie/{movieId}");
    }
}
